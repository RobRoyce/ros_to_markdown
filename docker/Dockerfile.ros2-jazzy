FROM osrf/ros:rolling-desktop-full

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.11 and development tools
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-venv \
    python3.11-dev \
    python3-pip \
    python3-pytest \
    python3-pytest-cov \
    python3-setuptools \
    python3-wheel \
    python3-empy \
    python3-lark \
    python3-colcon-common-extensions \
    python3-pytest-repeat \
    python3-pytest-rerunfailures \
    python3-pytest-timeout \
    python3-coverage \
    python3-yaml \
    ros-rolling-turtlesim \
    ros-rolling-joy \
    git \
    sudo \
    ros-rolling-rmw-cyclonedds-cpp \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user
ARG USERNAME=ros
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN if getent group $USER_GID > /dev/null 2>&1; then \
        groupmod -n $USERNAME $(getent group $USER_GID | cut -d: -f1); \
    else \
        groupadd --gid $USER_GID $USERNAME; \
    fi \
    && if getent passwd $USER_UID > /dev/null 2>&1; then \
        usermod -l $USERNAME -g $USER_GID -d /home/$USERNAME -m $(getent passwd $USER_UID | cut -d: -f1); \
    else \
        useradd --uid $USER_UID --gid $USER_GID -m $USERNAME; \
    fi \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Set up rosdep under the new user
RUN rosdep fix-permissions && \
    su - $USERNAME -c "rosdep update"

# Create and set up workspaces
RUN mkdir -p /opt/ros/ws/src && \
    chown -R $USERNAME:$USERNAME /opt/ros/ws && \
    mkdir -p /home/$USERNAME/ws/src && \
    chown -R $USERNAME:$USERNAME /home/$USERNAME/ws

# Set up the workspace
WORKDIR /workspace
RUN mkdir -p src/ros_to_markdown

# Copy package files into the workspace
COPY --chown=$USERNAME:$USERNAME pyproject.toml README.md ./
COPY --chown=$USERNAME:$USERNAME src/ros_to_markdown src/ros_to_markdown/
COPY --chown=$USERNAME:$USERNAME tests tests/

# Switch to non-root user
USER $USERNAME

# Create and activate Python 3.11 virtual environment
RUN python3.11 -m venv /home/$USERNAME/.venv

# Install the package in development mode
RUN /bin/bash -c "source /opt/ros/rolling/setup.bash && \
    source /home/$USERNAME/.venv/bin/activate && \
    pip install --upgrade pip && \
    pip install lark && \
    pip install -e '.[ros2,dev]' && \
    # Create symlinks for ROS Python packages
    ln -s /opt/ros/rolling/lib/python3.12/site-packages/* /home/$USERNAME/.venv/lib/python3.11/site-packages/ || true"

# Source the workspace in .bashrc
RUN echo "source /opt/ros/rolling/setup.bash" >> /home/$USERNAME/.bashrc && \
    echo "source /home/$USERNAME/.venv/bin/activate" >> /home/$USERNAME/.bashrc

# Copy and setup launch script
USER root
COPY docker/scripts/launch-ros2-test-env.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/launch-ros2-test-env.sh

# Set up shell environment for ROS and venv
RUN echo 'source "/opt/ros/rolling/setup.bash"' >> /etc/bash.bashrc && \
    echo 'source "/home/ros/.venv/bin/activate"' >> /etc/bash.bashrc && \
    echo 'if [ -f "/sample_ws/install/setup.bash" ]; then source "/sample_ws/install/setup.bash"; fi' >> /etc/bash.bashrc

# Copy and setup entrypoint script
COPY docker/scripts/ros2-rolling-entrypoint.sh /ros2-entrypoint.sh
RUN chmod +x /ros2-entrypoint.sh

# Set environment variables
ENV PYTHONPATH=/workspace/src:/opt/ros/rolling/lib/python3.12/site-packages:$PYTHONPATH
ENV VIRTUAL_ENV=/home/$USERNAME/.venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Switch back to non-root user
USER $USERNAME

ENTRYPOINT ["/ros2-rolling-entrypoint.sh"]
CMD ["/bin/bash"] 