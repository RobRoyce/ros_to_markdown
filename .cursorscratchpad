#! .cursorscratchpad

<SCRATCHPAD_TEMPLATE>
  # Rules
  - Use this template to create a new SCRATCHPAD entry if one does not exist
  - If one does exist, update the existing entry
  - Organize your thoughts in in the provided sections
  - Use file names and paths as references to the codebase
  - Do not include code snippets unless absolutely necessary
  - Focus on "why" over "what" or "how"

  <PLANNING description="Use checklist to track your planned work ONLY for the current conversation. Update as you go.">

  </PLANNING>

  <ARCHITECTURAL_DECISIONS description="Describe the architectural decisions you made. Focus on the why.">

  </ARCHITECTURAL_DECISIONS>

  <IMPLEMENTATION description="Include key details about your implementation.">

  </IMPLEMENTATION>

  <HUMAN_AI_NOTES description="Include any notes or feedback from me or AI.">

  </HUMAN_AI_NOTES>
</SCRATCHPAD_TEMPLATE>

---

<EXAMPLE_SCRATCHPAD>
  <PLANNING>
    - [X] Read the .cursornotes file
    - [ ] Create a new SCRATCHPAD entry
    - [ ] Update the existing SCRATCHPAD entry
  </PLANNING>

  <ARCHITECTURAL_DECISIONS>
    - Modified the directory structure to support new feature X
    - Decided to use Y instead of Z
  </ARCHITECTURAL_DECISIONS>

  <IMPLEMENTATION>
    - Implemented feature X by modifying file Y and function Z
  </IMPLEMENTATION>

  <HUMAN_AI_NOTES>
    - User wants to focus on feature Y for now
    - User recommended I update .cursorrules to include convention on code style
  </HUMAN_AI_NOTES>
</EXAMPLE_SCRATCHPAD>

<CRITICAL>
  You MUST NOT modify anything above the following line!
</CRITICAL>

---

<SCRATCHPAD>
  <PLANNING>
    - [X] Fixed permission issues in Humble Dockerfile
    - [X] Fixed pytest not found error
    - [X] Fixed coverage installation warning
    - [X] Verified tests passing across all distros
    - [ ] Implement git hooks for linting and testing
  </PLANNING>

  <ARCHITECTURAL_DECISIONS>
    - Decided to keep ROS2 Humble aligned with Iron's simpler approach (no venv)
    - Standardized script permissions and user context handling across Dockerfiles
    - Maintained consistent environment setup across all ROS2 distros while respecting their differences
    - Chose to pre-install coverage in Dockerfile rather than during test runs
  </ARCHITECTURAL_DECISIONS>

  <IMPLEMENTATION>
    Key fixes implemented:
    - Moved all root operations before USER switch in Dockerfiles
    - Added pip local bin to PATH in entrypoint script
    - Standardized pytest and coverage installation across containers
    - Fixed permission issues with:
      * /etc/bash.bashrc modifications
      * Script installations and permissions
      * Coverage directory access
  </IMPLEMENTATION>

  <HUMAN_AI_NOTES>
    - User caught important detail about keeping ROS_DOMAIN_ID in entrypoint
    - Tests now pass consistently across all distros (ROS1 Noetic, ROS2 Humble, Iron, Jazzy)
    - Coverage reporting works without warnings
    - Learned to be more careful about user context in Docker operations
    - Keeping Humble close to Iron's configuration helps maintain consistency
  </HUMAN_AI_NOTES>
</SCRATCHPAD>