#! .cursorrules

# Project Information
- Project Lead: Rob Royce ([@RobRoyce](https://github.com/RobRoyce))
- Project Start: January 1, 2025
- Project Status: Active Development
- Repository: https://github.com/RobRoyce/ros_to_markdown
- License: Apache 2.0
- Language: Python
- Dependencies: ROS (Noetic, Humble, Iron, Rolling), Python (3.8, 3.10, 3.11, 3.12)
- Todays Date: Current date/time MUST be requested from user when needed

## Project Structure

```
ros_to_markdown/
├── src/ros_to_markdown/ # Main package source code
│ ├── core/ # Core functionality
│ ├── models/ # Data models
│ └── utils/ # Utility functions
├── tests/
│ ├── core/ # Core functionality tests for unit testing using stubs, mocks, etc.
│ ├── integration/ # Integration tests for use with actual ROS systems running in Docker
│ └── test_helpers/ # Test utilities
├── docs/ # Documentation
├── docker/ # Docker configurations
│ ├── Dockerfile.ros1 # ROS1 Noetic image
│ ├── Dockerfile.ros2-humble # ROS2 Humble image
│ ├── Dockerfile.ros2-iron # ROS2 Iron image
│ ├── Dockerfile.ros2-jazzy # ROS2 Rolling/Jazzy image
│ └── scripts/ # Docker helper scripts
└── config/ # Configuration files
├── pyproject.toml # Python package config
├── .ruff.toml # Ruff linter config
├── .coveragerc # Coverage configuration
└── .dockerignore # Docker ignore patterns
```

---

# System Prompts
The following rules shall be used to guide the development of this project and any iteraction between you and I.

## How to organize your thoughts on this project
There are several layers of abstraction to this project:

- Stakeholders:
    - The user ("me" or "I")
    - Cursor Agent ("AI", "agent", or "you")
    - The end-user of ros_to_markdown ("user")
    - Human-AI Team (me and you, "we")
- The project itself (`ros_to_markdown`) and all of its components, files, folders, etc.
- The infrastructure we use to develop and test this project:
    - Docker
    - CI/CD pipelines
    - IDEs (Cursor)
- Agent-specific files:
    - Cursor Rules: (this file)
    - Cursor Scratchpad (your working memory)
    - Cursor Notes (your long-term memory)
- End-user ROS systems that will use this project and their respective idiosyncrasies:
    - ROS version
    - Ubuntu version
    - Python version
    - etc.

When you are working on this project, you must keep all of these layers of abstraction in mind. You should focus on the project itself in your responses. The other abstractions should serve to inform your responses. If I want you to focus on any of the other abstractions, I will explicitly tell you to do so.

## Global Rules for AI
- Do not hallucinate.
- You are encouraged to create any necessary files/folders.
- You are encouraged to keep a running log of your thoughts in the .cursorscratchpad file.
- You are encouraged to use the .cursornotes file as an AI journal. 
    - We will use this file together to track the development of the project over time.
    - This will also serve as the basis for our CHANGELOG as we release new versions of the project.
- You should optimize for readability, clarity, and conciseness.

## Python Development
- Project Structure:
  - Clear, modular organization (src, tests, docs, config)
  - Separate files by responsibility (models, services, controllers, utils)
  - Consistent import organization and module hierarchy
  - Tests must have docstrings + use pytest
  - Maintain >90% test coverage

- Development Environment:
  - Dependency management via virtual environments, pip, and containers
  - Environment variable-based configuration with strong validation
  - Code style enforcement via Ruff (includes formatting + linting)

- Code Quality:
  - Add type annotations + docstrings (PEP 257) to all functions, classes, and modules
  - Robust error handling with contextual logging (via structlog)
  - Automated testing via CI/CD pipelines
  - Regular linting and documentation builds
  - Use importlib.util.find_spec for package availability checks
  - Keep imports at top of files, organized by stdlib -> third-party -> local
  - Maintain consistent error message format for better debugging

## ROS Notes
- We are primarily concerned with ROS1 (Noetic) and ROS2 (Iron, Humble, Rolling).
- Rolling support is tentative because of various idiosyncrasies.
- You should always be cognizant of the ROS distribution you are targeting when generating code.
- I will specify the ROS distribution in the prompt when needed.

## ROS Distribution Specifications
- **ROS1 (Noetic Ninjemys)**:
  - EOL May 2025
  - Ubuntu 20.04 LTS + Python 3.8
  - Core tools: `rospy`, `catkin_tools`
  - Legacy support only - no new feature development

- **ROS2 Iron Irwini** (LTS):
  - EOL Dec 2024
  - Ubuntu 22.04 LTS + Python 3.10
  - Core tools: `rclpy`, `colcon`, `ament_tools`
  - Legacy support only - no new feature development

- **ROS2 Humble Hawksbill** (LTS):
  - EOL May 2027
  - Ubuntu 22.04 LTS + Python 3.10
  - Core tools: `rclpy`, `colcon`, `ament_tools`
  - Maintenance mode only
  
- **ROS2 Rolling/Jazzy Jalisco** (Latest):
  - EOL May 2029
  - Ubuntu 24.04 LTS + Python 3.12
  - Core tools: `rclpy`, `colcon`, `ament_tools`
  - Referred to as "Rolling" henceforth but synonymous with "Jazzy"

## File Organization
- Project Structure:
    - paths: ["src/**/*.py", "tests/**/*.py", "docs/**/*.md", "docker/**/*", "*.{toml,yml,md}"]
    - rules: ["Follow defined directory layout", "Maintain modular organization"]
    
- Python Source:
    - paths: ["src/ros_to_markdown/**/*.py"]
    - rules: ["Type annotations + PEP 257 docstrings", "Use Ruff for formatting"]

- Tests:
    - paths: ["tests/**/*.py"]
    - rules: ["Use pytest", "Docstring all tests", "Maintain >90% coverage"]

- Documentation:
    - paths: ["docs/**/*.md", "README.md"]
    - rules: ["Keep docs current", "Follow Markdown standards"]

## Docker & Environment
- Base Images:
    - rules: ["Use official ROS images", "Minimize dependencies", "Separate ROS1/ROS2 configs"]

- Platform Support:
    - rules: ["Support Linux, WSL, macOS, Windows", "Handle X11 display configuration per-platform", "Environment Variables: DISPLAY, X11_VOLUME, DOCKER_EXTRA_HOSTS"]
    
- Rolling/Jazzy Specifics:
    - rules: ["Use Python 3.11 (temporary)", "Virtual env for packages", "ROS_DISTRO=rolling", "Plan 3.12 migration"]

---

# AI Commands
When I submit a command to you, you MUST follow the procedure outlined in the command.

- "update docs":
    - procedure:
        1. "Parse all Markdown files in docs/**/*.md and README.md"
        2. "Extract relevant updates from conversation"
        3. "Apply any relevant and useful updates"

- "update rules":
    - procedure:
        1. "Parse .cursorrules file"
        2. "Extract rule updates from conversation"
        3. "Apply any relevant and useful updates"

- "capture thoughts":
    - procedure:
        1. "You MUST read the .cursorscratchpad file"
        2. "Extract relevant insights from current context"
        3. "Interleave your thoughts with previous thoughts in the <SCRATCHPAD> buffer"
        4. "You MUST write your thoughts in the <SCRATCHPAD> buffer"
        5. "Consolidate your thoughts as necessary, grouping related thoughts together"

- "update cursornotes":
    - procedure:
        1. "You MUST read the .cursornotes and .cursorscratchpad files"
        2. "Consolidate previous thoughts from <SCRATCHPAD>"
        3. "Integrate new information from current conversation"
        4. "Format as dated entry, request date from user"
        5. "Append to .cursornotes file"
        6. "Clear <SCRATCHPAD> section in .cursorscratchpad"
